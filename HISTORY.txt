Formulator changes

  0.9.3

    Features Added
      
      - added RadioField for simple display of radio buttons.

      - added action, method and enctype property to form settings.
        These are displayed using the special form.header() and form.footer()
        methods.

    Bugs Fixed

      - Fixed typos in security assertions.

      - use REQUEST.form instead of REQUEST where possible.

  0.9.2

    Features Added

      - Ability to rename groups, including the first 'Default' group.

      - Improved support for sticky forms; form.render() can now
        take an optional second argument, REQUEST, which can come
        from a previous form submit. Even unvalidated fields will
        then be sticky.

      - fields can call an extra optional external validation 
        function (such as a Python script).

      - New alternate name property: the alternate name is added to
        the result dictionary or REQUEST object after validation. This
        can be useful to support field names which wouldn't be valid
        field names, which can occur in some locales.

      - New extra property; can be used to add extra attributes to
        a HTML tag.

      - Some IntegerField properties can now be left empty if 
        no value is required, instead of having to set them to 0.

      - Merged functionality of RangedIntegerField into IntegerField.
        RangedIntegerField is not addable anymore, though supported
        as a clone of IntegerField for backwards compatibility. Leaving
        'start' and 'end' empty in the new IntegerField will mean those
        checks will not be performed.

    Bugs Fixed

      - Added more missing security declarations.

      - html_quote added in various places to make fields display
        various HTML entities the right way.

  0.9.1

    Features Added

      - Widgets now have a 'hidden' property. If set, the widget is
        drawn as a 'hidden' field. 'hidden' fields do get validated
        normally, however.
 
      - Changed API of Widget and Validator slightly; render() and
        validate() methods now take an extra 'key' argument indicating
        the name the field should have in the form. This is necessarily
        to handle sub fields of composite fields.

      - Added EmailField and FloatField.
 
      - Added some infrastructure to support 'composite fields'; fields 
        composed out of multiple sub fields.

      - Added DateTimeField, the first example of a composite field
        (field made of other fields).

    Bugs Fixed  

      - General code cleanups; removed some unused methods.

      - Fixed security assertion for validate_all_to_request() method.

      - MethodFields now check whether they have 'View' permission to
        execute listed Python Script or DTML Method.

      - RangedInteger is now < end, instead of <=, compatible with the
        documentation.
      
  0.9

    Initial Release

      - Initial public release of Formulator.



